datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  role           Enum_RoleName  @default(USER)
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
}

model Account {
  userId             String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model Session {
  sessionToken String   @unique
  userId       String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Order {
  id               String         @id @default(cuid())
  total_price      Float
  address          String
  order_history_id Int            @unique
  userId          String

  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderHistory     OrderHistory[]
  productOrders    ProductOrder[]
}

model OrderHistory {
  order_history_id String         @id @default(cuid())
  changed_at       DateTime
  order_id         String
  status_id        String

  order            Order          @relation(fields: [order_id], references: [id])
  status           Status         @relation(fields: [status_id], references: [id])
}

model Product {
  id                   String         @id @default(cuid())
  name                 String
  description          String
  price                Float
  special_instructions String?
  category_id          String

  category             Category       @relation(fields: [category_id], references: [id])
  productOrders        ProductOrder[]
}

model Category {
  id                   String           @id @default(cuid())
  name                 String
  description          String?

  products             Product[]
}

model ProductOrder {
  id                   String           @id @default(cuid())
  product_subtotal     Float
  total_product        Int
  include_cutlery      Boolean
  order_id             String
  product_id           String

  order                Order         @relation(fields: [order_id], references: [id])
  product              Product       @relation(fields: [product_id], references: [id])
}

model Status {
  id                   String           @id @default(cuid())
  name                 String
  description          String?

  histories            OrderHistory[]
}

enum Enum_RoleName {
  ADMIN
  USER
}
