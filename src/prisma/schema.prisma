model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?

  # Relationship
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  orders        Order[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Order {
  order_id          String     @id @default(cuid())
  total_price       Float
  address           String
  order_history_id  Int
  user_id           Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [user_id], references: [user_id])
  orderHistory OrderHistory @relation(fields: [order_history_id], references: [order_history_id])
}

model OrderHistory {
  order_history_id Int     @id
  changed_at       DateTime
  order_id         Int
  status_id        Int

  // Relations
  order  Order  @relation(fields: [order_id], references: [order_id])
  status Status @relation(fields: [status_id], references: [status_id])
}

model Product {
  product_id           Int     @id
  name                 String
  description          String
  price                Float
  special_instructions String?
  category_id          Int

  // Relations
  category Category      @relation(fields: [category_id], references: [category_id])
  productOrders ProductOrder[]
}

model Category {
  category_id Int     @id
  name        String
  description String?
  
  // Relations
  products Product[]
}

model ProductOrder {
  product_order_id Int     @id
  product_subtotal Float
  total_product    Int
  include_cutlery  Boolean
  order_id         Int
  product_id       Int

  // Relations
  order   Order   @relation(fields: [order_id], references: [order_id])
  product Product @relation(fields: [product_id], references: [product_id])
}

model Status {
  status_id   Int    @id
  name        String
  description String?
}